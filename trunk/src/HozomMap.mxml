<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	xmlns:hozom="*">
	<mx:Script>
		<![CDATA[
			import mx.core.Application;
			import com.hozom.map.HozomMapCaller;
			import mx.controls.Alert;
			import com.hozom.map.Floater;
			import mx.controls.Image;
			import com.hozom.map.HozomMapUtil;
			
			// interact with the ammap.swf
			private var mapCaller:HozomMapCaller;
			
			[Bindable]
			public var hozomUserNumber:int;
			
			[Bindable]
			public var contactNumber:int;
			
			public function addContact(long:Number, lat:Number):int
			{
				var floater:Floater = createImageFloater(long, lat, -3.5, -3.5, HozomMapUtil.ICON_DOT);
				floater.type = HozomMapUtil.CONTACT_TYPE;
				this.addChild(floater.disObj);
				return mapCaller.addFloater(floater);
			}
			
			public function addHozomUser(long:Number, lat:Number, name:String):int
			{
				var floater:Floater = createImageFloater(long, lat, -3.5, -3.5, HozomMapUtil.ICON_HEAD);
				floater.type = HozomMapUtil.HOZOM_USER_TYPE;
				
				floater.data = new Object();
				var of:Floater = createAttachedImageFloater(floater, -6, -29, HozomMapUtil.ICON_POPNEW);
				
				var huip:HozomUserInfoPopup = new HozomUserInfoPopup();
				huip.hozomUserName = name;
				var pf:Floater = createAttachedFloater(floater, 4, -41, huip);
				
				floater.data[HozomMapUtil.FLOATER_ONLINE_KEY] = of;
				floater.data[HozomMapUtil.FLOATER_POP_KEY] = pf;
				
				this.addChild(floater.disObj);
				
				return mapCaller.addFloater(floater);
			}
			
			public function addSearchedCity(long:Number, lat:Number, phoneNumber:String, city:String):int
			{
				var floater:Floater = createImageFloater(long, lat, -10, -10, HozomMapUtil.ICON_FLASHDOT);
				floater.type = HozomMapUtil.SEARCHED_CITY_TYPE;
				
				floater.data = new Object();
				
				var scp:SearchedCityPopup = new SearchedCityPopup();
				scp.phoneNumber = phoneNumber;
				scp.city = city;
				var pf:Floater = createAttachedFloater(floater, -51, -50, scp);
				floater.data[HozomMapUtil.FLOATER_POP_KEY] = pf;
				
				this.addChild(floater.disObj);
				var id:int = mapCaller.addFloater(floater);
				
				// and mouse handlers
				var img:Image = Image(floater.disObj);
				img.data = id;
				img.buttonMode = true;
				img.useHandCursor = true;
				img.addEventListener(MouseEvent.ROLL_OVER, searchedCityRollOver);
				img.addEventListener(MouseEvent.ROLL_OUT, searchedCityRollOut);

				return id;
			}
			
			public function showOnline(hozomUserId:int) : void
			{
				showOrHideAttachedFloater(hozomUserId, HozomMapUtil.HOZOM_USER_TYPE, HozomMapUtil.FLOATER_ONLINE_KEY, true);
			}
			
			public function hideOnline(hozomUserId:int) : void
			{
				showOrHideAttachedFloater(hozomUserId, HozomMapUtil.HOZOM_USER_TYPE, HozomMapUtil.FLOATER_ONLINE_KEY, false);
			}
			
			public function showHozomUserInfo(hozomUserId:int) : void
			{
				showOrHideAttachedFloater(hozomUserId, HozomMapUtil.HOZOM_USER_TYPE, HozomMapUtil.FLOATER_POP_KEY, true);
			}
			
			public function hideHozomUserInfo(hozomUserId:int) : void
			{
				showOrHideAttachedFloater(hozomUserId, HozomMapUtil.HOZOM_USER_TYPE, HozomMapUtil.FLOATER_POP_KEY, false);
			}
			
			public function showSearchedCityInfo(searchedCityId:int) : void
			{
				showOrHideAttachedFloater(searchedCityId, HozomMapUtil.SEARCHED_CITY_TYPE, HozomMapUtil.FLOATER_POP_KEY, true);
			}
			
			public function hideSearchedCityInfo(searchedCityId:int) : void
			{
				showOrHideAttachedFloater(searchedCityId, HozomMapUtil.SEARCHED_CITY_TYPE, HozomMapUtil.FLOATER_POP_KEY, false);
			}
			
			private function initAmmap():void
			{
				mapCaller = new HozomMapCaller();
				mapCaller.initListener();
			}
			
			private function createImageFloater(long:Number, lat:Number, xOffset:Number, yOffset:Number, source:Class):Floater
			{
				var img:Image = new Image();
				var mcX:Number = mapCaller.getMcXByLong(long);
				var mcY:Number = mapCaller.getMcYByLat(lat);
				img.x = mapCaller.getXByLong(long) + xOffset;
				img.y = mapCaller.getYByLat(lat) + yOffset;
				img.source = source;
				return new Floater(long, lat, mcX, mcY, xOffset, yOffset, img);
			}
			
			private function createAttachedImageFloater(host:Floater, xOffset:Number, yOffset:Number, source:Class) : Floater
			{
				var img:Image = new Image();
				img.source = source;
				
				return createAttachedFloater(host, xOffset, yOffset, img);
			}
			
			private function createAttachedFloater(host:Floater, xOffset:Number, yOffset:Number, disObj:DisplayObject):Floater
			{
				disObj.visible = false;
				disObj.x = host.disObj.x + xOffset;
				disObj.y = host.disObj.y + yOffset;
				return new Floater(0, 0, 0, 0, xOffset, yOffset, disObj);
			}
			
			private function showOrHideAttachedFloater(id:int, floaterType:String, key:String, visible:Boolean):void
			{
				var floater:Floater = mapCaller.findFloaterById(id);
				if (floater == null || floater.type != floaterType)
				{
					return;
				}
			
				var of:Floater = Floater(floater.data[key]);
				if (of.disObj.visible != visible)
				{
					if (visible)
					{
						this.addChild(of.disObj);
					}
					else
					{
						this.removeChild(of.disObj);
					}
					
					of.disObj.visible = visible;
				}
			}
			
			// event handlers
			private function searchedCityRollOver(event:MouseEvent):void
			{
				if (!event.currentTarget is Image)
				{
					return;
				}
				var img:Image = Image(event.currentTarget);
				var id:int = int(img.data);
				showSearchedCityInfo(id);
			}
			
			private function searchedCityRollOut(event:MouseEvent):void
			{
				if (!event.currentTarget is Image)
				{
					return;
				}
				var img:Image = Image(event.currentTarget);
				var id:int = int(img.data);
				hideSearchedCityInfo(id);
			}
		]]>
	</mx:Script>
	<mx:SWFLoader id="hozomAmmap" source="ammap.swf?flashId=hozomAmmap" creationComplete="initAmmap();" />
	<hozom:SummaryInfo x="{this.width-102}" y="{this.height-70}" hozomUserNumber="{hozomUserNumber}" contactNumber="{contactNumber}"/>
	<mx:Text x="19" y="253" text="Text" width="330" height="37" id="txtDebug"/>
</mx:Canvas>
